#/usr/bin/env python

import re
import sys

def usage():
    print '\tPython files merging tool'
    print '\t\t usage ./pys2py SOURCE.py destfile'
    print '\t\t where SOURCE is the main .py script file that has local dependeces'


def write_header(f_src, f_dst):
    original_header = get_main_script_header(f_src)
    f = open(f_dst, 'w+')
    f.write(original_header)
    f.close()
    

def write_pys2py_stamp(f_dst):
    pass


if __name__=='__main__':

    if len(sys.argv) != 3):
        usage()

    src_main_filename = sys.argv[1]
    dst_filename = sys.argv[2]

    # Todo check if 1 exist -> ok, check if 2 exist -> ko


    f_main_src = open(src_main_filename, 'r')
    f_dst = open(dst_filename, 'w')
    # Get header form main file and write it to the dest file 
    line = f_main_src.readline()  
    while line:
        # Loop while you find spaces or #, exit when first character is found
        if re.match(r'\w', line[0]):
            break
        f_dst.write(line)
        line = f_main_src.readline()

    # Print pys2py stamp
    f_dst.write('#'*80+ '\n')
    f_dst.write('########## File autogenerated merging local') # No newline here
    f_dst.write(' .py libraries using pys2py #########\n')
    f_dst.write('#'*80+ '\n')

    modified_src_filename = '/tmp/' + src_main_filename + str(randint(1**16))
    f_modified_src = open(modified_src_filename, 'w')
    # Search all from X import Y or improt X
    while line:
        local_imports = find_local_imports(line)
        if local_imports:
            line_without_local = remove_locals(line)
            f_modifed_src.write('#' + line)
            f_modifed_src.write(line_without_local)
        else:
            f_modified_src.write(line)
            


        f_dst.write(mod_line)
        line = f_main_src.readline()

    # Look if is a local .py file

    # Is a local file, putting it inside de dest and commend line


    f_main_src.close()
    f_dst.close()

 

